// index.js ‚Äî Recordatorious (MVP Free) ‚Äî versi√≥n ‚Äúfina‚Äù (sin <br/>)

// Requisitos: .env con BOT_TOKEN, SUPABASE_URL, SUPABASE_ANON_KEY
require("dotenv").config();
const { Bot } = require("grammy");
const { createClient } = require("@supabase/supabase-js");

// --- Variables de entorno ---
const BOT_TOKEN = process.env.BOT_TOKEN;
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_ANON_KEY = process.env.SUPABASE_ANON_KEY;

if (!BOT_TOKEN || !SUPABASE_URL || !SUPABASE_ANON_KEY) {
  console.error("‚ùå Falta configurar BOT_TOKEN, SUPABASE_URL o SUPABASE_ANON_KEY en .env");
  process.exit(1);
}

// --- Clientes ---
const bot = new Bot(BOT_TOKEN);
const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

// --- Utilidades de normalizaci√≥n y env√≠o largo ---
const toPlainSpaces = (s) =>
  (s || "")
    // espacios no est√°ndar ‚Üí espacio normal
    .replace(/[\u00A0\u2000-\u200B\u202F\u205F\u3000]/g, " ")
    // colapsar espacios m√∫ltiples
    .replace(/\s+/g, " ")
    .trim();

const chunkText = (text, size = 3800) => {
  const chunks = [];
  for (let i = 0; i < text.length; i += size) chunks.push(text.slice(i, i + size));
  return chunks;
};

const replySmart = async (ctx, text, extra) => {
  const parts = chunkText(text);
  for (const p of parts) await ctx.reply(p, extra);
};

// --- Expresiones y helpers de parsing ---
const DASH = "[-‚Äì‚Äî]"; // acepta -, ‚Äì y ‚Äî
const SAVE_RE  = new RegExp(`^#\\s*(.+?)\\s*${DASH}\\s*(.+)$`, "i"); // #clave -/‚Äì/‚Äî valor
const QUERY_RE = new RegExp("^\\?\\s*(.+)$");                         // ?clave
const DEL_RE   = new RegExp("^-\\s*(.+)$");                           // -clave

const normalizeKey = (s) =>
  (s || "")
    .toLowerCase()
    .normalize("NFD").replace(/[\u0300-\u036f]/g, "") // sin acentos
    .replace(/\s+/g, " ")
    .trim();

// --- Mensaje de bienvenida (/start) en HTML, usando \n ---
const welcomeMsgHtml =
`üëã ¬°Hola! Espero que est√©s fenomenal.
Soy <b>Reco</b>, tu maestro de llaves para recordar cualquier dato simple.

Puede ser cumplea√±os de amigos, clave de tu casa, d√≥nde has aparcado, alg√∫n tel√©fono de inter√©s, la talla de pie de tus hijos, e incluso un texto largo de un mensaje que quieras guardar o tus propias notas personales‚Ä¶ ¬°todo lo que se te ocurra!

Solo tienes que hacerlo as√≠ üëá

<b>Guarda un dato con:</b>
#nombre - valor

<b>Cons√∫ltalo con:</b>
?nombre

<b>B√≥rralo con:</b>
-nombre

<b>Listar todo lo tuyo:</b>
?*

<b>Ejemplos:</b>
‚Ä¢ #tel pap√° - 612345678
‚Ä¢ #tel mam√° - 612345679
‚Ä¢ #candado bici - 1234
‚Ä¢ #clave tarjeta - 4321
‚Ä¢ #cita m√©dico - 12/10 10:00h
‚Ä¢ #toma vitaminas - 08:00h cada d√≠a
‚Ä¢ #matr√≠cula coche - 1234ABC
‚Ä¢ #talla zapato Juan - 42
‚Ä¢ #wifi casa - PepeWifi / clave123

Tambi√©n puedes pegar <b>varias l√≠neas</b> en un mismo mensaje (una por recordatorio) y los guardo todos.

¬°Adelante, prueba y me dices üôÇ!`;

bot.command("start", async (ctx) => {
  await ctx.reply(welcomeMsgHtml, { parse_mode: "HTML", disable_web_page_preview: true });
});

// --- Handler principal de texto ---
bot.on("message:text", async (ctx) => {
  // Pre-limpieza: espacios raros -> normales
  const incoming = toPlainSpaces(ctx.message.text || "");
  // Multil√≠nea: cada l√≠nea se trata como operaci√≥n independiente
  const lines = incoming.split(/\r?\n/).map(l => l.trim()).filter(Boolean);

  const outputs = [];

  for (const line of lines) {
    // 1) LISTAR TODO (?* o ?* <p√°gina>)
    if (/^\?\*\s*\d*$/.test(line)) {
      const m = line.match(/^\?\*\s*(\d+)?$/);
      const page = Math.max(1, parseInt(m?.[1] || "1", 10));
      const pageSize = 50;

      const { data, error, count } = await supabase
        .from("records")
        .select("key_text,value", { count: "exact" })
        .eq("user_id", ctx.from.id)
        .order("created_at", { ascending: false })
        .range((page - 1) * pageSize, page * pageSize - 1);

      if (error) {
        outputs.push(`‚ö†Ô∏è Error listando: ${error.message}`);
      } else if (!data || data.length === 0) {
        outputs.push(page === 1 ? "üì≠ No tienes registros a√∫n." : `üì≠ P√°gina ${page} vac√≠a.`);
      } else {
        const total = count ?? data.length;
        const maxPage = Math.max(1, Math.ceil(total / pageSize));
        const header = `üóÇÔ∏è Tus registros (p√°gina ${page}/${maxPage}, total ${total})`;
        const body = data.map(r => `‚Ä¢ ${r.key_text} ‚Üí ${r.value}`).join("\n");
        outputs.push(`${header}\n${body}\n\n‚û°Ô∏è Usa \`?* ${page + 1}\` para la siguiente p√°gina.`);
      }
      continue;
    }

    // 2) GUARDAR (#clave -/‚Äì/‚Äî valor)
    let m = line.match(SAVE_RE);
    if (m) {
      const rawKey = toPlainSpaces(m[1]);
      const value  = toPlainSpaces(m[2]);
      const keyNorm = normalizeKey(rawKey);

      const { error } = await supabase
        .from("records")
        .upsert(
          { user_id: ctx.from.id, key_norm: keyNorm, key_text: rawKey, value },
          { onConflict: "user_id,key_norm" }
        );

      outputs.push(error
        ? `‚ö†Ô∏è Error guardando "${rawKey}": ${error.message}`
        : `‚úÖ Guardado: "${rawKey}" ‚Üí "${value}"`);
      continue;
    }

    // 3) CONSULTAR (?clave, tambi√©n por prefijo)
    if (QUERY_RE.test(line)) {
      const q = toPlainSpaces(line.replace(/^\?\s*/, ""));
      const keyNorm = normalizeKey(q);

      const { data, error } = await supabase
        .from("records")
        .select("key_text,value")
        .eq("user_id", ctx.from.id)
        .ilike("key_norm", `%${keyNorm}%`)
        .limit(50);

      if (error) outputs.push(`‚ö†Ô∏è Error consultando "${q}": ${error.message}`);
      else if (!data || data.length === 0) outputs.push(`‚ö†Ô∏è No encontr√© "${q}"`);
      else if (data.length === 1) outputs.push(`üîç "${data[0].key_text}": ${data[0].value}`);
      else outputs.push("üîé Coincidencias:\n" + data.map(r => `‚Ä¢ ${r.key_text} ‚Üí ${r.value}`).join("\n"));
      continue;
    }

    // 4) BORRAR (-clave)
    m = line.match(DEL_RE);
    if (m) {
      const rawKey = toPlainSpaces(m[1]);
      const keyNorm = normalizeKey(rawKey);

      const { data, error } = await supabase
        .from("records")
        .delete()
        .eq("user_id", ctx.from.id)
        .eq("key_norm", keyNorm)
        .select("key_text")
        .maybeSingle();

      outputs.push(error
        ? `‚ö†Ô∏è Error borrando "${rawKey}": ${error.message}`
        : data ? `üóëÔ∏è Borrado: "${data.key_text}"`
              : `‚ö†Ô∏è No hab√≠a nada con "${rawKey}"`);
      continue;
    }

    // 5) Formato no reconocido
    outputs.push(
      "‚ö†Ô∏è Formato no reconocido. Usa:\n" +
      "#clave - valor  (tambi√©n vale ‚Äì o ‚Äî)\n" +
      "Consultar: ?clave  |  Listar todo: ?*\n" +
      "Borrar: -clave"
    );
  }

  // Responder (si pega varias l√≠neas, lo agregamos y partimos si es largo)
  await replySmart(ctx, outputs.join("\n"));
});

// --- Arranque ---
bot.start({
  onStart: () => console.log("‚úÖ Recordatorious bot is running‚Ä¶")
});
